local username1 = game.Players.LocalPlayer.Name
if username1 == 'WsTPxAlaska' or 'jehad00' then
	Roles = 'Dev'
else
	if username1 == 'hidolp55' or 'Maxisbestinroblox ' then
		Roles = 'ST'
	else
		Roles = 'MB'
	end
end

local a=[[
I'll never understand skidders :>
]]print(a)if not syn_checkcaller then error'Unsupported exploit!'end;local b="ws://sadasdsad.momowhaley.repl.co"
--Console Setup
rconsolename("Exo Launcher Console")
rconsoleprint('@@BLUE@@')
rconsoleprint("Welcome to da Exo Launcher Console! (Useless for now) ")

--Actual MainStuff
local socket;
if syn_checkcaller then
	socket = syn.websocket.connect(b)
end

local username = game.Players.LocalPlayer.Name
local Message = script.Parent.Message

	local json_encode = function(tbl)
		local json = game:GetService("HttpService"):JSONEncode(tbl)
		return json
	end
	local json_decode = function(json)
		local tbl = game:GetService("HttpService"):JSONDecode(json)
		return tbl
	end

function newMessage(data)
	local user = data.Username
	local msg = data.Message
	local placeholder = script.Parent.MessageHolder.Placeholder:Clone()
	placeholder.Name = user
	placeholder.Parent = script.Parent.MessageHolder
	placeholder.Username.Text = user
	placeholder.Message.Text = msg
	placeholder.Visible = true
end

	if not _G.client then
		_G.client = socket
		_G.client:Send(json_encode({
			['Action'] = 'Connected',
			['Username'] = username,
		}))
		_G.client.OnMessage:Connect(function(msg)
			local data = json_decode(msg)

			if data['Action'] == 'New User' then
				newMessage({
					['Username'] = data['Username'],
					['Message'] = 'has joined the chat!';
				});
				return;
			end
			newMessage(data);
		end)
end

	function sendMessage(msg)
		local newmsg = {
		['Username'] = '['..Roles..'] [' .. username .. ']:',
			['Message'] = Message.Text
		}	
		newmsg = json_encode(newmsg)
	_G.client:Send(newmsg)
	end


	script.Parent.Minimize.MouseButton1Click:Connect(function()
	script.Parent:TweenPosition(UDim2.new(-1.5,0,1.5,0), 'In', 'Linear', 0.5, true)
		script.Parent.Parent.Open:TweenPosition(UDim2.new(-0.006, 0,0.947, 0), 'In', 'Linear', 0.5, true)
	end)
	script.Parent.Parent.Open.MouseButton1Click:Connect(function()
	script.Parent:TweenPosition(UDim2.new(0.5,0,0.5,0), 'Out', 'Linear', 0.5, true)
		script.Parent.Parent.Open:TweenPosition(UDim2.new(-1.5,0,1.5,0), 'Out', 'Linear', 0.5, true)
	end)


	local opened = true;


	game:GetService('UserInputService').InputBegan:Connect(function(key, gpe)
		if gpe then return end

		if key.KeyCode == Enum.KeyCode.BackSlash then
			Message:CaptureFocus()
			wait()
			Message.Text = ''
		elseif key.KeyCode == Enum.KeyCode.Insert then
			opened = not opened

			if opened then
				script.Parent.Parent:TweenPosition(UDim2.new(0.5,0,0.5,0), 'Out', 'Linear', 0.5, true)
				script.Parent.Parent.Open:TweenPosition(UDim2.new(-1.5,0,1.5,0), 'Out', 'Linear', 0.5, true)
			else
				script.Parent.Parent:TweenPosition(UDim2.new(-1.5,0,1.5,0), 'In', 'Linear', 0.5, true)
				script.Parent.Parent.Open:TweenPosition(UDim2.new(-0.006, 0,0.947, 0), 'In', 'Linear', 0.5, true)
			end
		end
end)

		local debounce = false;
		local Commands = {
	['.help'] = function()
		--do nothing for now
	end}

	function send()
		if debounce then return end;
		if #Message.Text < 1 then 
			return 
		elseif #Message.Text > 80 then
			Message.Text = 'Message is too long.'
			debounce = true;
			delay(1.5, function()
				Message.Text = ''
				debounce = false;
			end)
			return 
		end;
		sendMessage()

		if Commands[Message.Text] then
			Commands[Message.Text]()
		end

		Message.Text = ''

		debounce = true;
		delay(1.5, function()
			debounce = false;
		end)
	end

	Message.FocusLost:Connect(function(enter)
		if not enter then return end;
		send()
	end)

	Message.Changed:Connect(function()
	if #Message.Text > 80 then
		Message.Text = Message.Text:sub(1,80)
		else

			local len = #Message.Text
		Message.Length.Text = tostring(len) .. '/80'

			if len > 50 and len < 60 then
				Message.Length.TextColor3 = Color3.fromRGB(235, 186, 52)
			elseif len > 60 and len < 70 then
				Message.Length.TextColor3 = Color3.fromRGB(235, 186, 52)
			elseif len > 70 and len <= 80 then
				Message.Length.TextColor3 = Color3.fromRGB(235, 0, 0)
			else
				Message.Length.TextColor3 = Color3.fromRGB(255, 255, 255)
			end
		end
	end)

script.Parent.Send.MouseButton1Click:Connect(function()
		send()
	end)

	--//Minimize Color
	script.Parent.Minimize.MouseEnter:Connect(function()
		game:GetService('TweenService'):Create(script.Parent.Minimize.image, TweenInfo.new(0.5), {ImageColor3 = Color3.fromRGB(35,35,35)}):Play()
	end)
	script.Parent.Minimize.MouseLeave:Connect(function()
		game:GetService('TweenService'):Create(script.Parent.Minimize.image, TweenInfo.new(0.5), {ImageColor3 = Color3.fromRGB(40,40,40)}):Play()
	end)


	--//Message Box Color
	script.Parent.Message.MouseEnter:Connect(function()
		game:GetService('TweenService'):Create(script.Parent.Message.image, TweenInfo.new(0.5), {ImageColor3 = Color3.fromRGB(34,34,34)}):Play()
	end)
	script.Parent.Message.Focused:Connect(function()
		game:GetService('TweenService'):Create(script.Parent.Message.image, TweenInfo.new(0.5), {ImageColor3 = Color3.fromRGB(31,31,31)}):Play()
	end)
	script.Parent.Message.FocusLost:Connect(function()
		game:GetService('TweenService'):Create(script.Parent.Message.image, TweenInfo.new(0.5), {ImageColor3 = Color3.fromRGB(39, 39, 39)}):Play()
end)	

local UserInputService = game:GetService("UserInputService")

local gui = script.Parent

local dragging
local dragInput
local dragStart
local startPos

local function update(input)
	local delta = input.Position - dragStart
	gui.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
end

gui.InputBegan:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
		dragging = true
		dragStart = input.Position
		startPos = gui.Position

		input.Changed:Connect(function()
			if input.UserInputState == Enum.UserInputState.End then
				dragging = false
			end
		end)
	end
end)

gui.InputChanged:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
		dragInput = input
	end
end)

UserInputService.InputChanged:Connect(function(input)
	if input == dragInput and dragging then
		update(input)
	end
end)


script.Parent.Settings.MouseButton1Click:Connect(function()
	script.Parent.Visible = false;
	script.Parent.Parent.Settings.Visible = true;
	script.Parent.EmojiTab.Visible = false
end)
